library("datasets")
iris
iris()
iris3
library("datasets")
demo()
plot.TukeyHSD
library(help = "datasets").
library(help = "datasets")
iris
crimtab
1+1
[1:10]
c(1:10)
load("~/R/Projects/Getting Data 3/.RData")
View(question3_GDP)
ave(as.numeric(subs(",", "", question3_GDP$X.3)))
mean(as.numeric(subs(",", "", question3_GDP$X.3)))
mean(as.numeric(gsub(",", "", question3_GDP$X.3)))
as.numeric(gsub(",", "", question3_GDP$X.3))
as.numeric(as.character(gsub(",", "", question3_GDP$X.3)))
as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:])))
as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP$X.3)])))
as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)])))
mean(as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)]))))
mean(as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)]))), na.rm = TRUE)
avr(as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)]))), na.rm = TRUE)
ave(as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)]))), na.rm = TRUE)
mean(as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)]))), na.rm = TRUE)
as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)])))
mean(as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)]))))
sum(as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)]))))
teste <- as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)])))
teste
teste[which(teste)]
which(teste)
which(is.na(teste)
which(is.na(teste))
teste[which(!is.na(teste))]
mean(teste[which(!is.na(teste))])
teste[which(is.na(teste))] = 0
mean(teste)
sum(teste) / size(teste)
sum(teste) / length(teste)
teste2 <- as.numeric(as.character(sub(",", "", question3_GDP$X.3[5:nrow(question3_GDP)])))
avg(teste2)
mean(teste2, na.rm = TRUE)
View(question3_GDP)
teste <- as.numeric(as.character(gsub(",", "", question3_GDP$X.3[5:194])))
mean(teste, na.rm = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "quizz4_question1.csv")
setwd("~/R/Projects/Getting Data 3")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "quizz4_question1.csv")
grep("^United",question3_GDP$X.2)
split_teste <- read.csv("quizz4_question1.csv")
View(split_teste)
strsplit(names(split_teste), "wgtp")
strsplit(names(split_teste), "wgtp")[[123]]
View(question3_matchs)
View(question3_educ)
View(question3_merge)
grep(".*?Fiscal year end: Jun.*", question3_merge$Special.Notes)
length(grep(".*?Fiscal year end: Jun.*", question3_merge$Special.Notes))
grep(".*?Fiscal year end: jun.*", question3_merge$Special.Notes)
grep(".*Fiscal year end: Jun.*", question3_merge$Special.Notes)
length(grep(".*Fiscal year end: Jun.*", question3_merge$Special.Notes))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampletimes
sampleTimes
year(sampleTimes)
install.packages("lubridate")
library(lubridate)
y(sampleTimes)
format(sampleTimes, "%Y")
sampleTimes[format(sampleTimes, "%Y")=="2012")
sampleTimes[format(sampleTimes, "%Y")=="2012"]
length(sampleTimes[format(sampleTimes, "%Y")=="2012"])
length(sampleTimes[format(sampleTimes, "%a/%Y")=="2012"])
length(sampleTimes[format(sampleTimes, "%a/%Y")=="1/2012"])
sampleTimes[format(sampleTimes, "%a/%Y")
format(sampleTimes, "%a/%Y")
length(sampleTimes[format(sampleTimes, "%a/%Y")=="seg/2012"])
